// AUTOGENERATED FILE
// This file was generated from grammar.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface MemoryStatementActionDict<T> extends BaseActionDict<T> {
  Statement?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Allocation?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  Assignment?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: TerminalNode, arg3: NonterminalNode) => T;
  Value?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Object?: (this: NonterminalNode, arg0: IterationNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: TerminalNode) => T;
  Pair?: (this: NonterminalNode, arg0: NonterminalNode, arg1: TerminalNode, arg2: NonterminalNode) => T;
  Array?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  Pointer?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  Location?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  LocationMemberAccess?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  LocationSubscript?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  ArrayString?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  StringLiteral?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  string?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  char?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  nonEscape?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  escape?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode) => T;
  literal?: (this: NonterminalNode, arg0: IterationNode) => T;
  identifier?: (this: NonterminalNode, arg0: IterationNode) => T;
  Label?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: TerminalNode) => T;
  number?: (this: NonterminalNode, arg0: IterationNode, arg1: NonterminalNode) => T;
  zero?: (this: NonterminalNode, arg0: TerminalNode) => T;
  nonzero?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
  Directive?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  LabelDirective?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: IterationNode) => T;
  StyleDirective?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: IterationNode) => T;
  MultiLocation?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  LocationSlice?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode, arg3: IterationNode, arg4: IterationNode, arg5: IterationNode, arg6: TerminalNode) => T;
  cssClass?: (this: NonterminalNode, arg0: IterationNode) => T;
}

export interface MemoryStatementSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: MemoryStatementActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: MemoryStatementActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: MemoryStatementActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: MemoryStatementActionDict<T>): this;
}

export interface MemoryStatementGrammar extends Grammar {
  createSemantics(): MemoryStatementSemantics;
  extendSemantics(superSemantics: MemoryStatementSemantics): MemoryStatementSemantics;
}

declare const grammar: MemoryStatementGrammar;
export default grammar;

